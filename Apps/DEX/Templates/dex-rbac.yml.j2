# ClusterRole for managing CRDs (for initial CRD creation)
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: {{ dex_clusterrole_name }}
rules:
  - apiGroups: ["apiextensions.k8s.io"]
    resources: ["customresourcedefinitions"]
    verbs: ["get", "list", "create", "update", "patch"]

# Role for managing Dex-specific CRs in its namespace
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: dex-crd-access
  namespace: {{ dex_namespace }}
rules:
  - apiGroups: ["dex.coreos.com"]
    resources:
      - connectors
      - authcodes
      - authrequests
      - oauth2clients
      - signingkeies
      - refreshtokens
      - passwords
      - offlinesessionses
      - devicerequests
      - devicetokens
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

# Bind cluster-wide CRD privileges to the ServiceAccount
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: {{ dex_clusterrolebinding_name }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: {{ dex_clusterrole_name }}
subjects:
  - kind: ServiceAccount
    name: {{ dex_service_account }}
    namespace: {{ dex_namespace }}

# Bind namespace-scoped Dex CR access
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: dex-crd-access-binding
  namespace: {{ dex_namespace }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: dex-crd-access
subjects:
  - kind: ServiceAccount
    name: {{ dex_service_account }}
    namespace: {{ dex_namespace }}
